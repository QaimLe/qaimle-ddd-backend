// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid())
  auth0Id          String?   @unique
  email            String    @unique
  username         String
  phone            String?   @unique
  nickname         String?
  fullName         String?
  gender           String?
  ageGroup         String?
  nationality      String?
  employmentSector String?
  profession       String?
  city             String?
  personalEmail    String?
  mobileVerified   Boolean   @default(false)
  loyaltyTier      String?
  subscriptionTier String?
  profileStatus    String?   @default("pending")
  createdAt        DateTime  @default(now())
  posts            Post[]
  roles            UserRole[]
  surveyResponses  SurveyResponse[]
  evaluations      Evaluation[]
  providerRequests ProviderRequest[]
  providerVotes    ProviderVote[]
  reviews          CompanySubmission[] @relation("UserReviews") // back-reference
  
  pointsBalance   Int      @default(0)  // quick lookup
  transactions    PointsTransaction[]

  userRewards      UserReward[]
deletedAt DateTime? // no default needed, NULL by default
}


model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  roles       RolePermission[] // back relation
deletedAt DateTime? // no default needed, NULL by default
}

model RolePermission {
  permissionId Int
  roleId       Int
  assignedAt   DateTime @default(now())

  role        Role       @relation(fields: [roleId], references: [id])
  permission  Permission @relation(fields: [permissionId], references: [id])

  @@id([permissionId, roleId]) // composite primary key
deletedAt DateTime? // no default needed, NULL by default
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  users       UserRole[]       // assuming you have UserRole somewhere
  permissions RolePermission[] // back relation
deletedAt DateTime? // no default needed, NULL by default
}

model UserRole {
  userId    String
  roleId    Int
  assignedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
deletedAt DateTime? // no default needed, NULL by default
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  body      String?
  userId    String
  status    String?  @default("draft")
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
deletedAt DateTime? // no default needed, NULL by default
}

model Survey {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now())

  questions   SurveyQuestion[]
  responses   SurveyResponse[]
deletedAt DateTime? // no default needed, NULL by default
}

model SurveyQuestion {
  id           Int      @id @default(autoincrement())
  surveyId     Int
  questionText String
  questionType String
  isRequired   Boolean   @default(false)
  createdAt    DateTime  @default(now())

  survey   Survey                 @relation(fields: [surveyId], references: [id])
  options  SurveyQuestionOption[]
  answers  SurveyAnswer[]
deletedAt DateTime? // no default needed, NULL by default
}

model SurveyQuestionOption {
  id        Int      @id @default(autoincrement())
  questionId Int
  optionText String
  optionValue String?
  createdAt DateTime @default(now())

  question SurveyQuestion @relation(fields: [questionId], references: [id])
deletedAt DateTime? // no default needed, NULL by default
}

model SurveyResponse {
  id         Int       @id @default(autoincrement())
  surveyId   Int
  userId     String
  submittedAt DateTime @default(now())

  survey   Survey @relation(fields: [surveyId], references: [id])
  user     User   @relation(fields: [userId], references: [id])
  answers  SurveyAnswer[]
deletedAt DateTime? // no default needed, NULL by default
}

model SurveyAnswer {
  id         Int       @id @default(autoincrement())
  responseId Int
  questionId Int
  valueText  String?
  createdAt  DateTime  @default(now())

  response SurveyResponse  @relation(fields: [responseId], references: [id])
  question SurveyQuestion  @relation(fields: [questionId], references: [id])
deletedAt DateTime? // no default needed, NULL by default
}

// Sectors
model Sector {
  id          Int                 @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime            @default(now())
  providers   ServiceProvider[]
  templates   EvaluationTemplate[]
  requests    ProviderRequest[]
  scores      EvaluationScore[]
deletedAt DateTime? // no default needed, NULL by default
}

// Service Providers
model ServiceProvider {
  id          Int       @id @default(autoincrement())
  name        String
  sectorId    Int
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())

  sector      Sector     @relation(fields: [sectorId], references: [id])
  evaluations Evaluation[]
  scores      EvaluationScore[]
deletedAt DateTime? // no default needed, NULL by default
}

// Evaluation Templates
model EvaluationTemplate {
  id         Int       @id @default(autoincrement())
  sectorId   Int
  version    Int
  effectiveFrom DateTime
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())

  sector     Sector               @relation(fields: [sectorId], references: [id])
  categories EvaluationCategory[]
  evaluations Evaluation[]
  deletedAt DateTime? // no default needed, NULL by default
}

// Evaluation Categories
model EvaluationCategory {
  id         Int       @id @default(autoincrement())
  templateId Int
  title      String
  weight     Float?
  orderIndex Int?

  template   EvaluationTemplate  @relation(fields: [templateId], references: [id])
  criteria   EvaluationCriterion[]
deletedAt DateTime? // no default needed, NULL by default
}

// Evaluation Criteria
model EvaluationCriterion {
  id          Int       @id @default(autoincrement())
  categoryId  Int
  description String
  inputType   String
  orderIndex  Int?

  category   EvaluationCategory  @relation(fields: [categoryId], references: [id])
  answers    EvaluationAnswer[]
deletedAt DateTime? // no default needed, NULL by default
}

// Evaluations
model Evaluation {
  id          Int       @id @default(autoincrement())
  userId      String
  providerId  Int
  templateId  Int
  submittedAt DateTime  @default(now())
  scorePercentage Float?
  isFlagged   Boolean   @default(false)
  isEdited    Boolean   @default(false)
  editedAt    DateTime?
  createdAt   DateTime  @default(now())

  user       User               @relation(fields: [userId], references: [id])
  provider   ServiceProvider    @relation(fields: [providerId], references: [id])
  template   EvaluationTemplate @relation(fields: [templateId], references: [id])
  answers    EvaluationAnswer[]
deletedAt DateTime? // no default needed, NULL by default
}

// Evaluation Answers
model EvaluationAnswer {
  id           Int      @id @default(autoincrement())
  evaluationId Int
  criterionId  Int
  score        Int?
  createdAt    DateTime @default(now())

  evaluation Evaluation @relation(fields: [evaluationId], references: [id])
  criterion  EvaluationCriterion @relation(fields: [criterionId], references: [id])
deletedAt DateTime? // no default needed, NULL by default
}

// Monthly Evaluation Scores
model EvaluationScore {
  id                     Int       @id @default(autoincrement())
  providerId             Int
  sectorId               Int
  month                  DateTime
  scorePercentage        Float
  rankingPosition        Int?
  totalProvidersInSector Int?
  publishedAt            DateTime?

  provider ServiceProvider @relation(fields: [providerId], references: [id])
  sector   Sector          @relation(fields: [sectorId], references: [id])
deletedAt DateTime? // no default needed, NULL by default
}

// Provider Requests
model ProviderRequest {
  id             Int       @id @default(autoincrement())
  sectorId       Int
  providerName   String
  submittedBy    String
  status         String    @default("pending")
  requestType    String
  description    String?
  votingLinkSlug String    @unique
  createdAt      DateTime  @default(now())
  approvedAt     DateTime?

  sector Sector @relation(fields: [sectorId], references: [id])
  submittedByUser User @relation(fields: [submittedBy], references: [id])
  votes ProviderVote[]
  companySubmission CompanySubmission?
deletedAt DateTime? // no default needed, NULL by default
}

// Provider Votes
model ProviderVote {
  id        Int       @id @default(autoincrement())
  userId    String
  votedAt   DateTime  @default(now())
  requestId Int

  request ProviderRequest @relation(fields: [requestId], references: [id])
  user    User            @relation(fields: [userId], references: [id])

  @@unique([requestId, userId]) // ensure one vote per user per request
deletedAt DateTime? // no default needed, NULL by default
}


// Company Submissions
model CompanySubmission {
  id            Int       @id @default(autoincrement())
  requestId     Int       @unique
  companyName   String
  website      String?
  officialEmail String?
  phoneNumber  String?
  submittedAt  DateTime @default(now())
  reviewedBy   String?
  reviewStatus  String? @default("pending")
  reviewedAt    DateTime?

  request  ProviderRequest @relation(fields: [requestId], references: [id])
  reviewer User?           @relation("UserReviews", fields: [reviewedBy], references: [id])
deletedAt DateTime? // no default needed, NULL by default
}


model PointsRule {
  id          String   @id @default(uuid())
  action      String   // e.g. "COMPLETE_EVALUATION", "COMPLETE_SURVEY"
  points      Int
  description String?  // human-readable explanation
  isActive    Boolean  @default(true)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  transactions PointsTransaction[]
deletedAt DateTime? // no default needed, NULL by default
}


model PointsTransaction {
  id         String   @id @default(uuid())
  userId     String
  ruleId     String
  points     Int
  reason     String?  // extra notes like "Evaluation ID: xyz"
  createdAt  DateTime @default(now())

  // Relations
  user       User        @relation(fields: [userId], references: [id])
  rule       PointsRule  @relation(fields: [ruleId], references: [id])
deletedAt DateTime? // no default needed, NULL by default
}


model Reward {
  id          String   @id @default(uuid())
  name        String
  description String?
  costPoints  Int      // how many points needed
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  userRewards UserReward[] // 👈 opposite side of relation

deletedAt DateTime? // no default needed, NULL by default
}


model UserReward {
  id         String   @id @default(uuid())
  userId     String
  rewardId   String
  redeemedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  reward Reward @relation(fields: [rewardId], references: [id])
deletedAt DateTime? // no default needed, NULL by default
}

CREATE INDEX idx_users_deletedat ON "User"(deletedAt);
